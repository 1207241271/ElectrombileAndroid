apply plugin: 'com.android.application'

def getDate() {
    def date = new Date()
//    def formattedDate = date.format('yyyyMMddHHmmss')
    def formattedDate = date.format('MMdd')
    return formattedDate
}

android {
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            storeFile file('../keystore/Electromile.debug.keystore')
        }
        release {
            keyAlias 'androidreleasekey'
            storeFile file('../keystore/Electromile.release.keystore')
        }
    }

    def propsFile = rootProject.file('keystore.properties')
    if (propsFile.exists() ) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        android.signingConfigs['release'].storePassword = props['storePassword']
        android.signingConfigs['release'].keyPassword = props['keyPassword']
        android.signingConfigs['debug'].storePassword = props['storePassword']
        android.signingConfigs['debug'].keyPassword = props['keyPassword']
    }else {
        throw new GradleException("Could not read keystore.properties!")
    }

    compileSdkVersion 24
    buildToolsVersion "25.0.0"

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1;
        }

        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = getDate()
        def version_Code = versionProps['VERSION_CODE'].toInteger() + value

        versionProps['VERSION_MAJOR'] = versionMajor.toString()
        versionProps['VERSION_MINOR'] = versionMinor.toString()
        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_CODE'] = version_Code.toString()

        if (value == 1) {
            versionProps.store(versionPropsFile.newWriter(), null)
        }

        defaultConfig {
            versionCode version_Code
            versionName "${versionMajor}.${versionMinor}.${versionPatch} (${versionBuild})"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    defaultConfig {
        applicationId "com.xunce.electrombile"
        minSdkVersion 19
        targetSdkVersion 24
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        useLibrary 'org.apache.http.legacy'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        general {}
        tencent {}
        FIR {
            targetSdkVersion 22
        }
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "SafeGuard_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
    //fix third library duplicate META-INF problem
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ECLIPSE_.SF'
        exclude 'META-INF/ECLIPSE_.RSA'
    }
    lintOptions {
        abortOnError false
    }
    //dataBinding
    dataBinding {
        enabled = true
    }
}
repositories {
    jcenter()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    // LeanCloud 基础包
    compile 'cn.leancloud.android:avoscloud-sdk:v3.14.8'
    // LeanCloud 统计包
    compile 'cn.leancloud.android:avoscloud-statistics:v3.14.8'
    // LeanCloud 用户反馈包
    compile 'cn.leancloud.android:avoscloud-feedback:v3.14.8@aar'
    // avoscloud-sns：LeanCloud 第三方登录包
    compile 'cn.leancloud.android:avoscloud-sns:v3.14.8@aar'
    compile 'cn.leancloud.android:qq-sdk:1.6.1-leancloud'
    compile 'com.orhanobut:logger:1.11'
    compile 'com.malinskiy:materialicons:1.0.2'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'de.halfbit:pinned-section-listview:1.0.0'
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    compile('org.eclipse.paho:org.eclipse.paho.android.service:1.0.2') {
        exclude module: 'support-v4'
    }
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha2'
    testCompile 'junit:junit:4.12'
    compile 'com.google.android.gms:play-services-maps:9.4.0'
    compile files('libs/core.jar')
    compile files('libs/BaiduLBS_Android.jar')
    compile 'cn.bingoogolapple:bga-qrcodecore:1.1.7@aar'
    compile 'cn.bingoogolapple:bga-zbar:1.1.7@aar'
    compile 'com.squareup.picasso:picasso:2.5.2'
}
